{"version":3,"sources":["components/Statistics/Statistics.js","App.js","index.js"],"names":["Statistics","props","good","neutral","bad","total","positivePercentage","App","state","handleCount","e","setState","prevState","target","name","this","countTotalFeedback","Math","round","countPositiveFeedbackPercentage","bind","type","onClick","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAkBeA,MAhBf,SAAoBC,GAClB,IAAQC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBAEnC,OACE,qCACE,uCAAqBJ,IAAd,QACP,0CAAwBC,IAAjB,QACP,sCAAoBC,IAAb,QACP,wCAAsBC,EAAMH,EAAMC,EAASC,KAApC,QACP,oDACsBF,EAAOI,EAAmBJ,EAAMC,EAASC,GAAO,EADtE,MAAO,YC8CEG,G,kNApDbC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,YAAc,SAAAC,GACZ,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAEG,OAAOC,KAAOF,EAAUF,EAAEG,OAAOC,MAAQ,O,wDAGhD,SAAmBZ,EAAMC,EAASC,GAEhC,OADcF,EAAOC,EAAUC,I,6CAGjC,SAAgCF,EAAMC,EAASC,GAC7C,IAAME,EACHJ,EAAOa,KAAKC,mBAAmBd,EAAMC,EAASC,GAAQ,IAEzD,OAAOa,KAAKC,MAAMZ,K,oBAGpB,WACE,MAA+BS,KAAKP,MAA5BN,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQU,KAAKC,mBACbV,EAAqBS,KAAKI,gCAAgCC,KAAKL,MAErE,OACE,qCACE,uDACA,wBAAQD,KAAK,OAAOO,KAAK,SAASC,QAASP,KAAKN,YAAhD,kBAGA,wBAAQK,KAAK,UAAUO,KAAK,SAASC,QAASP,KAAKN,YAAnD,qBAGA,wBAAQK,KAAK,MAAMO,KAAK,SAASC,QAASP,KAAKN,YAA/C,iBAGA,4CACA,cAAC,EAAD,CACEP,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,W,GA9CZiB,cCClBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.09aad0e2.chunk.js","sourcesContent":["// import styles from './Statistics.module.css';\n\nfunction Statistics(props) {\n  const { good, neutral, bad, total, positivePercentage } = props;\n\n  return (\n    <>\n      <p key=\"id-1\">Good: {good}</p>\n      <p key=\"id-2\">Neutral: {neutral}</p>\n      <p key=\"id-3\">Bad: {bad}</p>\n      <p key=\"id-4\">Total: {total(good, neutral, bad)}</p>\n      <p key=\"id-5\">\n        Positive feedback: {good ? positivePercentage(good, neutral, bad) : 0}%\n      </p>\n    </>\n  );\n}\n\nexport default Statistics;\n","import React, { Component } from 'react';\nimport Statistics from './components/Statistics';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleCount = e => {\n    this.setState(prevState => ({\n      [e.target.name]: prevState[e.target.name] + 1,\n    }));\n  };\n  countTotalFeedback(good, neutral, bad) {\n    const total = good + neutral + bad;\n    return total;\n  }\n  countPositiveFeedbackPercentage(good, neutral, bad) {\n    const positivePercentage =\n      (good / this.countTotalFeedback(good, neutral, bad)) * 100;\n\n    return Math.round(positivePercentage);\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback;\n    const positivePercentage = this.countPositiveFeedbackPercentage.bind(this);\n\n    return (\n      <>\n        <h1>Please leave Feedback</h1>\n        <button name=\"good\" type=\"button\" onClick={this.handleCount}>\n          Good\n        </button>\n        <button name=\"neutral\" type=\"button\" onClick={this.handleCount}>\n          Neutral\n        </button>\n        <button name=\"bad\" type=\"button\" onClick={this.handleCount}>\n          Bad\n        </button>\n        <h2>Statistics</h2>\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          positivePercentage={positivePercentage}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}